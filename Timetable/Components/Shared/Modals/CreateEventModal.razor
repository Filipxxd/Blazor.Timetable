@using Timetable.Services
@using Timetable.Structure
@typeparam TEvent where TEvent : class
@inject ModalService ModalService

<div class="modal-container">
    <Input Label="Title" @bind-Value=EventWrapper.Title />

    <Input Label="Start" @bind-Value=EventWrapper.DateFrom />
    
    <Input Label="End" @bind-Value=EventWrapper.DateTo />

    @if (CreateFields != null)
    {
        @CreateFields(EventWrapper.Event)
    }

    <div>
        <button @onclick=Save>Save Event</button>
    </div>
</div>

@code {
    [Parameter] public EventWrapper<TEvent> EventWrapper { get; set; } = default!;
    [Parameter] public EventCallback<TEvent> OnSave { get; set; }
    [Parameter] public CompiledProps<TEvent> Props { get; set; } = default!;
    [Parameter] public RenderFragment<TEvent> CreateFields { get; set; } = default!;

    private async Task Save()
    {
        await OnSave.InvokeAsync(EventWrapper.Event);
        ModalService.Close();
    }
}