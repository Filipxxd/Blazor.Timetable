@typeparam TEvent where TEvent : class
@attribute [type: RenderModeInteractiveServer]

<div class="timetable-wrapper">
    <Options 
        Events=@Events
        CurrentDisplayType=@_timetableManager.DisplayType
        ExportConfig=@ExportConfig
        TimetableConfig=@TimetableConfig
        OnDisplayTypeChanged=HandleDisplayTypeChanged />

    <div class="timetable">
        <Header 
            Config=@TimetableConfig
            Title=@_timetableManager.Grid.Title
            OnNextClicked=HandleNextClicked
            OnPreviousClicked=HandlePreviousClicked />

        <ModalContainer />

        @if (_timetableManager.DisplayType == DisplayType.Week || _timetableManager.DisplayType == DisplayType.Day)
        {
            <div class="timetable-grid" style="grid-template-columns: 80px repeat(@(_timetableManager.Grid.Columns.Count), 1fr); grid-template-rows: 40px auto; grid-auto-rows: minmax(50px, auto);">
                @for (var i = 1; i <= _timetableManager.Grid.RowTitles.Count + 1; i++)
                {
                    <GridItem CssClass="grid-border"
                              RowIndex=@(i + 1)
                              ColumnIndex=1 />

                    var index = i - 2;
                    @if (index >= 0 && index < _timetableManager.Grid.RowTitles.Count)
                    {
                        <GridItem CssClass="timetable-row-title"
                                  RowIndex=@(i + 1)
                                  ColumnIndex=1>
                                @_timetableManager.Grid.RowTitles[index]
                        </GridItem>
                    }
                }

                @foreach(var column in _timetableManager.Grid.Columns)
                {
                    foreach (var cell in column.Cells)
                    {
                        <GridItem CssClass="timetable-body-cell grid-border"
                                  RowIndex=@(cell.RowIndex + 1)
                                  SlotId=@(!cell.IsHeaderCell ? cell.Id : null)
                                  OnClick="@(() => HandleOpenCreateModal(cell))"
                                  ColumnIndex=@(column.Index + 1) />
                    }
                }

                @foreach (var column in _timetableManager.Grid.Columns)
                {
                    <GridItem CssClass="timetable-head-title grid-border"
                              RowIndex=1
                              OnClick=@(() => HandleChangedToDay(column.DayOfWeek))
                              ColumnIndex=@((column.Index + 1))>
                        @(DateHelper.GetLocalizedName(column.DayOfWeek).Capitalize())
                    </GridItem>

                    @foreach (var cell in column.Cells)
                    {                            
                        var sortedEvents = cell.Events.OrderByDescending(x => x.Span).ToList();

                        foreach (var cellEvent in cell.Events)
                        {
                            <TimetableEvent 
                                EventId=@cellEvent.Id
                                Title=@cellEvent.Title
                                Order=@sortedEvents.IndexOf(cellEvent)
                                IsHeaderEvent=@cell.IsHeaderCell
                                NumberOfEvents=@cell.Events.Count
                                Span=@cellEvent.Span
                                DetailTemplate=@((builder) => DetailTemplate(cellEvent.Event)(builder))
                                EditTemplate=@((builder) => EditTemplate(cellEvent.Event)(builder))
                                DeleteTemplate=@((builder) => DeleteTemplate(cellEvent.Event)(builder))
                                DayColumn=@column.Index
                                StartSlot=@(cell.RowIndex + 1) />
                        }
                    }
                }

            </div>
        }
    </div>
</div>