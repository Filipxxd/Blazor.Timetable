@typeparam TEvent where TEvent : class
@attribute [type: RenderModeInteractiveServer]

<div class="timetable-wrapper">
    <Options Events=@Events
             CurrentDisplayType=@_timetableManager.DisplayType
             ExportConfig=@ExportConfig
             TimetableConfig=@TimetableConfig
             OnDisplayTypeChanged=HandleDisplayTypeChanged />

    <div class="timetable">
        <Header Config=@TimetableConfig
                Title=@_timetableManager.Grid.Title
                OnNextClicked=HandleNextClicked
                OnPreviousClicked=HandlePreviousClicked />

        <div class="timetable-content">
            <div class="timetable-head">
                <div class="timetable-time-column"></div>
                @foreach (var column in _timetableManager.Grid.Columns)
                {
                    <div class="timetable-head-cell" @onclick="() => HandleChangedToDay(column.DayOfWeek)">
                        @DateHelper.GetWeekDayName(column.DayOfWeek).Capitalize()
                    </div>
                }
            </div>

            @if (_timetableManager.DisplayType == DisplayType.Day || _timetableManager.DisplayType == DisplayType.Week)
            {
                <div class="timetable-grid">
                    @* Header events *@
                    @foreach (var column in _timetableManager.Grid.Columns)
                    {
                        foreach (var eventWrapper in column.HeaderCell.Events)
                        {
                            <TimetableEvent EventId="@eventWrapper.Id"
                            Title="@eventWrapper.Title"
                            IsWholeDay="@eventWrapper.IsHeaderEvent"
                            Span=1
                            DetailTemplate=@(builder => DetailTemplate(eventWrapper.Event)(builder))
                            DayColumn="@eventWrapper.ColumnIndex"
                            StartSlot=1 />
                        }
                    }

                    @* Grid (borders + dragdrop containers) *@
                    @for (var col = 0; col <= _timetableManager.Grid.Columns.Count; col++)
                    {
                        @for (var cell = 0; cell <= _timetableManager.Grid.Columns[0].Cells.Count; cell++)
                        {
                            if (col == 0 || cell == 0)
                            {
                                <div class="timetable-body-cell"
                                     style="grid-column:@(col + 1); grid-row:@(cell + 1);">
                                </div>
                            }
                            else
                            {
                                <div class="timetable-body-cell"
                                     data-slot-id="@_timetableManager.Grid.Columns[col - 1].Cells[cell - 1].Id"
                                     style="grid-column:@(col + 1); grid-row:@(cell + 1);">
                                </div>
                            }
                        }
                    }


                    @for (var i = 0; i < _timetableManager.Grid.RowPrepend.Count; i++)
                    {
                        <div style="grid-column: 1; grid-row: @(i + 2);">
                            @(_timetableManager.Grid.RowPrepend[i])
                         </div>
                    }

                    @* DragDropable events *@
                    @foreach (var column in _timetableManager.Grid.Columns)
                    {
                        foreach (var cell in column.Cells)
                        {
                            foreach (var cellEvent in cell.Events)
                            {
                                <TimetableEvent EventId="@cellEvent.Id"
                                                Title="@cellEvent.Title"
                                                IsHeaderEvent="@cellEvent.IsHeaderEvent"
                                                Span="@cellEvent.Span"
                                                DetailTemplate=@(builder => DetailTemplate(cellEvent.Event)(builder))
                                                DayColumn="@cellEvent.ColumnIndex"
                                                StartSlot="@(cellEvent.RowIndex + 1)" />
                            }
                        }
                    }
                </div>
            }
            else
            {
                
            }
                
        </div>
    </div>
</div>