@typeparam TEvent where TEvent : class
@attribute [type: RenderModeInteractiveServer]

<div class="timetable-wrapper">
    <Options Events=@Events
             CurrentDisplayType=@_timetableManager.DisplayType
             ExportConfig=@ExportConfig
             TimetableConfig=@TimetableConfig
             OnCreateClicked=@(() => HandleOpenCreateModal(_timetableManager.CurrentDate))
             OnDisplayTypeChanged=HandleDisplayTypeChanged />

    <div class="timetable">
        <Header Config=@TimetableConfig
                Title=@_timetableManager.Grid.Title
                OnNextClicked=HandleNextClicked
                OnPreviousClicked=HandlePreviousClicked />

        <ModalContainer />

        @{var isMonthView = _timetableManager.DisplayType == DisplayType.Month;}

        <div class="timetable-grid"
                style="@(isMonthView
                ? $"grid-auto-columns: 1fr; grid-template-rows: 40px; grid-auto-rows: 1fr;"
                : $"grid-template-columns: 80px; grid-auto-columns: 1fr; grid-template-rows: 40px 80px; grid-auto-rows: 1fr;")">

            @if (_timetableManager.Grid.HasRowTitles)
            {
                for (var i = 1; i <= _timetableManager.Grid.RowTitles.Count + 1; i++)
                {
                    <GridItem CssClass="grid-border"
                                RowIndex=@(i + 1)
                                ColumnIndex=1 />

                    var index = i - 2;
                    @if (index >= 0 && index < _timetableManager.Grid.RowTitles.Count)
                    {
                        <GridItem CssClass="timetable-row-title"
                                    RowIndex=@(i + 1)
                                    ColumnIndex=1>
                            @_timetableManager.Grid.RowTitles[index]
                        </GridItem>
                    }
                }
            }

            @foreach(var column in _timetableManager.Grid.Columns)
            {
                foreach (var cell in column.Cells)
                {
                    var style = "timetable-body-cell grid-border" + (cell.Type == CellType.Disabled ? " disabled" : "");
                    <GridItem CssClass="@style"
                                RowIndex=@(cell.RowIndex + 1)
                                SlotId=@(cell.Type == CellType.Normal ? cell.Id : null)
                                OnClick="@(() => HandleOpenCreateModal(cell.DateTime))"
                                ColumnIndex=@(!isMonthView ? column.Index + 1 : column.Index) />
                }
            }

            @foreach (var column in _timetableManager.Grid.Columns)
            {
                <GridItem CssClass="timetable-head-title grid-border"
                            RowIndex=1
                            OnClick=@(() => HandleChangedToDay(column.DayOfWeek))
                            ColumnIndex=@(isMonthView ? column.Index : column.Index + 1)>
                    @(DateHelper.GetLocalizedName(column.DayOfWeek).Capitalize())
                </GridItem>

                @foreach (var cell in column.Cells)
                {                            
                    foreach (var cellEvent in cell.Events)
                    {
                        @*TODO month span*@
                        <TimetableEvent EventId=@cellEvent.Id
                                        Title=@cellEvent.Title
                                        Order=@cell.Events.IndexOf(cellEvent)
                                        IsHeaderEvent=@(cell.Type == CellType.Header)
                                        Offset=@cell.Events.Count
                                        Span=@cellEvent.Span
                                        DetailTemplate=@(builder => DetailTemplate(cellEvent.Event)(builder))
                                        EditTemplate=@(builder => EditTemplate(cellEvent.Event)(builder))
                                        DeleteTemplate=@(builder => DeleteTemplate(cellEvent.Event)(builder))
                                        ColumnIndex=@(isMonthView ? column.Index - 1 : column.Index)
                                        RowIndex=@(cell.RowIndex + 1) />
                    }
                }
            }
        </div>
    </div>
</div>