@page "/"
@using System.Collections.ObjectModel
@using Timetable.Components
@using Timetable.Common.Enums
@using Timetable.Components.Shared.Forms
@rendermode InteractiveServer

<PageTitle>Example page</PageTitle>

<Timetable TEvent=TimetableEvent 
        Events=Events
                    
        Title="e => e.Title"
        DateFrom="e => e.StartTime"
        DateTo="e => e.EndTime"
        GroupId="e => e.GroupId"

        TimetableConfig="new(){
            DefaultDisplayType=DisplayType.Week,
            DisplayTypes=[DisplayType.Week, DisplayType.Month, DisplayType.Day],
            Days=[ DayOfWeek.Sunday, DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday],
            TimeFrom=new(8, 0),
            TimeTo=new(16, 0),
            Is24HourFormat=true
        }"

        OnEventUpdated=HandleEventUpdated
        OnPreviousClicked=HandlePreviousClicked 
        OnNextClicked=HandleNextClicked>
    <DetailTemplate Context="timetableEvent">
        <div>
            <p>Custom Event View</p>
            <p><strong>Start:</strong> @timetableEvent.StartTime.ToString("g")</p>
            <p><strong>End:</strong> @timetableEvent.EndTime.ToString("g")</p>
            <p>@timetableEvent.Description</p>
            <p>@timetableEvent.GroupId</p>
        </div>
    </DetailTemplate>
    <AdditionalFields>
        <Input Model=@context Label="Description" Selector="x => x.Description" />
    </AdditionalFields>
</Timetable>

@code{
    public ObservableCollection<TimetableEvent> Events { get; set; } = new EventGenerator().GenerateHardcodedEvents();

    public void HandleNextClicked()
    {
        // TODO: Custom behaviour
    }

    public void HandlePreviousClicked()
    {
        // TODO: Custom behaviour
    }
    
    public void HandleEventUpdated(TimetableEvent timetableEvent){
        // TODO: Update the event in the database
    }
}